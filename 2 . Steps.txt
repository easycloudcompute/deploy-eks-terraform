# Configure AWS CLI using aws configure

# Create provider.tf

# Create a new bucket and use this for remote backend for terraform and update backend.tf

# Create data.tf to fetch the AMI's and AZ's

# Create main.tf for VPC configuration ( we using existing terraform modules here ) followed by updating its relavent variables in variables.tf and terraform.tfvars

# Test all of the above code 

Under /Users/rahul/Documents/DevOps-Projects/K8S/Automation/deploy-eks-terraform , run below commands

terraform init
terraform fmt
terraform validate
terraform plan

Finally create the VPC using below command

terraform apply --auto-approve

- Verify if below VPC components were created in AWS Console 

> VPC : jenkins-vpc
> Public Subnet: jenkins-vpc-public-ca-central-1a
> Route Tables : 2 route tables - jenkins-vpc-public , jenkins-vpc-default
> Internet Gateway : jenkins-vpc

# Update the main.tf with new code for creating the SG

# Create the SG

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply --auto-approve

- Verify the followning from AWS Console 

> SG : jenkins-SG with correct inbound and outbound rules

# Update main.tf to create a new EC2

# Create the EC2

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply --auto-approve

# Verify the new jenkins server was created and has the right SG associated with it from the AWS Console 

# Login to jenkins server using URL as http://public-ip-ec2:8080/

- Install suggested plugins
- Set user name and password as rahul/rahul

# Create all the required .tf files under EKS cluster . Note - EKS cluster is deployed in a private subnet and we also define a nat gateway here to access internet but internet cannot access the EKS Cluster

# Push code to github

cd /Users/rahul/Documents/DevOps-Projects/K8S/Automation/deploy-eks-terraform

git init
git add .
git commit -m "pushing code to repo v1"
git remote add origin git@github.com:easycloudcompute/deploy-eks-terraform.git
git branch -M main
git push -u origin main

# Add AWS credentials in jenkins UI - Access key and Secret Access Key .

- Go to Manage Jenkins
- Add new credentials as "Secret Text" for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY

See img-1 

# Create a new job as "pipeline" and copy the contents of "Jenkinsfile" in this folder 

# Add parameter to this job for creating / destroying terraform resources 

See img-2

# Create a new folder under EKS-terraform-code called k8s-manifest-files . Add the deployment and service manifest files for nginx deployment here .

# Upload all the code till now to our github repo

cd /Users/rahul/Documents/DevOps-Projects/K8S/Automation/deploy-eks-terraform

git init
git add .
git commit -m "pushing code to repo v2" 
git push -u origin main





